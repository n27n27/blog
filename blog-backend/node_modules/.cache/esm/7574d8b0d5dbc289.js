let Koa,bodyParser,Router,mongoose,api,createFakeData;_d5d‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_d5d‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_d5d‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_d5d‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_d5d‍.w("./api/index.tsx",[["default",["api"],function(v){api=v}]]);_d5d‍.w("./createFakeData.tsx",[["default",["createFakeData"],function(v){createFakeData=v}]]);require('dotenv').config();








// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URI } = process.env;

mongoose
    .connect(MONGO_URI, {})
    .then(() => {
        console.log('Connected to MongoDB');
        // createFakeData();
    })
    .catch(e => {
        _d5d‍.g.console.error(e);
    });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes());

// 라우터 적용 전에 bodyParser 적용
app.use(bodyParser());

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4030;
app.listen(4030, () => {
    console.log('Listening to port 4030');
});